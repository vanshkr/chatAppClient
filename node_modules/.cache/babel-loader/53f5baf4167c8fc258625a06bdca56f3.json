{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/chat-app/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        this.acks[this.ids] = args.pop();\n        packet.id = this.ids++;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this2 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this2.packet({\n            type: PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this3 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this3.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this3.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"sources":["D:/chat-app/client/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","subDestroy","undefined","i","splice"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}